{
    "model_role_name": "Path Validator",
    "user_role_name": "Path Validator",
    "system_role": "You are a <LANGUAGE> programmer and very good at analyzing <LANGUAGE> code. Particularly, you are good at understanding the data-flow propagation within several functions.",
    "task": "You will be provided an interprocedural data-flow path, please determine whether the given path can cause an exception or a bug.",
    "analysis_rules": [
      "Here are several tips for you",
      "- A interprocedural path is consisted by several interprocedural paths from different functions. If all the sub-paths are reachable, then the path is a reachable path and can cause an exception or a bug, and you should answer Yes. Otherwise, you should answer No.",
      "- If the source of the first function and finally reach the sink point in the last function, this path is a reachable path, and thus you should answer Yes.",
      "- If the value of the source point is modified (assigned a different value) or checked for null before reaching the sink point, the path is unreachable, and you should answer No.",
      "- If the function exits or returns before reaching the sink point or propagation sites like call sites, the path is unreachable, and you should answer No.",
      "- Pay attention to conditions. For each sub-path in a function, you should infer the value of the condition based on the branch information and keep them in the memory. Finally, you should check whether the conditions of each sub-path are conflict with each otehr. If so, the path is unreachable and you should answer No.",
      "- Please consider the values of specific variables in the path. If the value does not satisfy any branch condition of the path, the path is unreachable, and thus, you should answer No.",
      "You can first analyze the value of conditions for each sub-path, then check whether the conditions are conflict with each other. Finally, you can determine whether the path is reachable or not."
    ],
    "question_template": ["When these functions are executed, is it possible that the following propagation path can introduce a <BUG_TYPE> bug?", 
      "```",
      "<PATH>",
      "```",
      "Here are the detailed explanation of this propagation path:",
      "<EXPLANATION>",
      ""
    ],
    "analysis_examples": [
      "Here are several examples:",
      "\n",
      "Example 1:",
      "User:",
      "Here is the program:",
      "```",
      "1. int* getArray(int length) {",
      "2.     int* array = NULL;",
      "3.     if (length > 0) {",
      "4.         array = (int*)malloc(length * sizeof(int));",
      "6.     }",
      "7.     return array;",
      "8. }",
      "",
      "1. int* getEvenArray(int length) {",
      "2.    if length <= 0 {",
      "3.        return NULL;",
      "4.    }",
      "5.    int* array = getArray(length);",
      "6.    for (int i = 0; i < length; i++) {",
      "7.        array[i] = 2*i;",
      "8.    }",
      "9.    return array;",
      "10. }",
      "```",
      "When these functions are executed, is it possible that the following propagation path can introduce a Null Pointer Deference bug?",
      "`array` at line 2 in the function `getArray` --> `int* array = getArray(length);` at line 5 in the function `getEvenArray`",
      "Here are the detailed explanation of this propagation path: ",
      "1. The null value at line 2 in function getArray is returned to caller at line 7.",
      "2. The null value at line 5 in function getEvenArray is dereferenceed at line 7, causing a Null Pointer Dereference bug.",
      "System:",
      "Explanation: This path consists of 2 sub-paths. The first sub-path is in function `getArray` This sub-path is reachable when condition `length <= 0`. The second sub-path is in function `getEvenArray`. This sub-path can be executed when condition `length > 0`. The two conditions are conflict with each other. Therefore, the path is unreachable.",
      "Answer: No.",
      "",

      "Example 2:",
      "User:",
      "Here is the program:",
      "```",
      "1. int foo(int* ptr) {",
      "2.     if (access(ptr, R_OK) == -1) {",
      "3.       free(ptr);",
      "4.       return -1;",
      "5.     }",
      "6.     return 0;",
      "7. }",
      "",
      "1. int goo(int* ptr) {",
      "2.     if (foo(ptr) != -1){",
      "3.         return *ptr",
      "4.     }",
      "5.     return -1;",
      "6. }",
      "```",
      "When these functions are executed, is it possible that the following propagation path can introduce a Use After Free bug?",
      "`free(ptr);` at line 3 in the function `foo` --> `foo(ptr)` at line 2 in the function `goo`",
      "Here are the detailed explanation of this propagation path: ",
      "1. The freed pointer at line 3 in function `foo` can propagate to the caller function through pointer parameter `ptr`",
      "2. The freed pointer at line 2 in function `goo` is dereferenceed at line 3, causing a Use After Free bug.",
      "System:",
      "Explanation: This path consists of 2 sub-paths. The first sub-path is in function `foo`. This sub-path is reachable when condition `access(ptr, R_OK) == -1` and function `foo()` returns -1. The second sub-path is in function `goo`. This sub-path can be executed when condition `foo(ptr) != -1`. The two subpaths' conditions are conflict with each other. Therefore, the path is unreachable.",
      "Answer: No.",
      "",

      "Example 3:",
      "User:",
      "Here is the program:",
      "```",
      "1. int* foo(int length) {",
      "2.     int *num1 = NULL;",
      "3.     if (length > 0) {",
      "4.         num1 = (int*)malloc(sizeof(int));",
      "5.     }",
      "6.     return num1;",
      "7. }",

      "1. int goo(int length) {",
      "2.     int* num1 = foo(length);",
      "3.     return *num1;",
      "4. }",
      "```",
      "When these functions are executed, is it possible that the following propagation path can introduce a Null Pointer Deference bug?",
      "`int *num1 = NULL;` at line 2 in the function `foo` --> `int* num1 = foo(length);` at line 2 in the function `goo`",
      "Here are the detailed explanation of this propagation path: ",
      "1. The null value at line 2 in function `foo` is returned to caller at line 6.",
      "2. The null value at line 2 in function `goo` is dereferenceed at line 3, causing a Null Pointer Dereference bug.",
      "System:",
      "Explanation: This path consists of 2 sub-paths. The first sub-path is in function `foo`. This sub-path is reachable when condition `length <= 0`. The second sub-path is in function `goo`. This sub-path can be executed with any condition. There is not any conflict between the two sub-paths. Therefore, the path is reachable.",
      "Answer: Yes.",
      ""
    ],
    "additional_fact": [
      "I may also provide you several important facts about the lines appearing in the path, including whether they are in if-statements and the line numbers of the if-conditions. For each line appearing in the provided path, you can reason this problem step by step according to the following paradigm: ",
      "- The line {line_number} is in the true/else branch of the if statement. ",
      "- For the given value of the variable, the true/else branch condition is always evaluated to true/false or may be evaluated to true. ",
      "- Thus, the line {line_number} is reachable/unreachable.",
      "After analyzing all the lines appearing in the path, you can determine whether the code can cause an exception or bug according to its reachability."
    ],
    "answer_format": [
      "(1) In the first line, you can provide the process of the reasoning and give explanations.",
      "(2) The second line should be a just one word, i.e., Yes or No.",
      "Here is an example answer if you need to answer a question:",
      "Explanation: {Your Explanation.}",
      "Answer: Yes"
    ],
    "meta_prompts": [
       "Now I will give you the program as follows: \n```\n<PROGRAM>\n``` \n",
       "Please Answer the following questions:\n<QUESTION>\n",
       "Your answer should follow the following format: \n<ANSWER>\n",
       "Lastly, I want to emphasize that you should not assume the bahavior and return values of external functions that are not provided. You only need to consider the conditions in the given functions.\n"
    ]
}